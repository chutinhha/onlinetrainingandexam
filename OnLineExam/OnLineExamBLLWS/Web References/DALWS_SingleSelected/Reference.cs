//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3603
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.3603 版自动生成。
// 
#pragma warning disable 1591

namespace OnLineExamBLLWS.DALWS_SingleSelected {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DALWS_SingleSelectedSoap", Namespace="http://tempuri.org/")]
    public partial class DALWS_SingleSelected : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetitemOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListCourseOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertQuestionOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateQuestionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSingleProblemListOperationCompleted;
        
        private System.Threading.SendOrPostCallback selectSingQuestionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DALWS_SingleSelected() {
            this.Url = global::OnLineExamBLLWS.Properties.Settings.Default.OnLineExamBLLWS_DALWS_SingleSelected_DALWS_SingleSelected;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetitemCompletedEventHandler GetitemCompleted;
        
        /// <remarks/>
        public event ListCourseCompletedEventHandler ListCourseCompleted;
        
        /// <remarks/>
        public event InsertQuestionCompletedEventHandler InsertQuestionCompleted;
        
        /// <remarks/>
        public event UpdateQuestionCompletedEventHandler UpdateQuestionCompleted;
        
        /// <remarks/>
        public event GetSingleProblemListCompletedEventHandler GetSingleProblemListCompleted;
        
        /// <remarks/>
        public event selectSingQuestionCompletedEventHandler selectSingQuestionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Getitem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Getitem(string a, string b) {
            object[] results = this.Invoke("Getitem", new object[] {
                        a,
                        b});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void GetitemAsync(string a, string b) {
            this.GetitemAsync(a, b, null);
        }
        
        /// <remarks/>
        public void GetitemAsync(string a, string b, object userState) {
            if ((this.GetitemOperationCompleted == null)) {
                this.GetitemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetitemOperationCompleted);
            }
            this.InvokeAsync("Getitem", new object[] {
                        a,
                        b}, this.GetitemOperationCompleted, userState);
        }
        
        private void OnGetitemOperationCompleted(object arg) {
            if ((this.GetitemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetitemCompleted(this, new GetitemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ListCourse", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Course[] ListCourse() {
            object[] results = this.Invoke("ListCourse", new object[0]);
            return ((Course[])(results[0]));
        }
        
        /// <remarks/>
        public void ListCourseAsync() {
            this.ListCourseAsync(null);
        }
        
        /// <remarks/>
        public void ListCourseAsync(object userState) {
            if ((this.ListCourseOperationCompleted == null)) {
                this.ListCourseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListCourseOperationCompleted);
            }
            this.InvokeAsync("ListCourse", new object[0], this.ListCourseOperationCompleted, userState);
        }
        
        private void OnListCourseOperationCompleted(object arg) {
            if ((this.ListCourseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListCourseCompleted(this, new ListCourseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertQuestion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool InsertQuestion(SingleProblem iq) {
            object[] results = this.Invoke("InsertQuestion", new object[] {
                        iq});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void InsertQuestionAsync(SingleProblem iq) {
            this.InsertQuestionAsync(iq, null);
        }
        
        /// <remarks/>
        public void InsertQuestionAsync(SingleProblem iq, object userState) {
            if ((this.InsertQuestionOperationCompleted == null)) {
                this.InsertQuestionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertQuestionOperationCompleted);
            }
            this.InvokeAsync("InsertQuestion", new object[] {
                        iq}, this.InsertQuestionOperationCompleted, userState);
        }
        
        private void OnInsertQuestionOperationCompleted(object arg) {
            if ((this.InsertQuestionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertQuestionCompleted(this, new InsertQuestionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateQuestion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateQuestion(SingleProblem uq) {
            object[] results = this.Invoke("UpdateQuestion", new object[] {
                        uq});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateQuestionAsync(SingleProblem uq) {
            this.UpdateQuestionAsync(uq, null);
        }
        
        /// <remarks/>
        public void UpdateQuestionAsync(SingleProblem uq, object userState) {
            if ((this.UpdateQuestionOperationCompleted == null)) {
                this.UpdateQuestionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateQuestionOperationCompleted);
            }
            this.InvokeAsync("UpdateQuestion", new object[] {
                        uq}, this.UpdateQuestionOperationCompleted, userState);
        }
        
        private void OnUpdateQuestionOperationCompleted(object arg) {
            if ((this.UpdateQuestionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateQuestionCompleted(this, new UpdateQuestionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSingleProblemList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SingleProblem[] GetSingleProblemList(string selectvalue) {
            object[] results = this.Invoke("GetSingleProblemList", new object[] {
                        selectvalue});
            return ((SingleProblem[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSingleProblemListAsync(string selectvalue) {
            this.GetSingleProblemListAsync(selectvalue, null);
        }
        
        /// <remarks/>
        public void GetSingleProblemListAsync(string selectvalue, object userState) {
            if ((this.GetSingleProblemListOperationCompleted == null)) {
                this.GetSingleProblemListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSingleProblemListOperationCompleted);
            }
            this.InvokeAsync("GetSingleProblemList", new object[] {
                        selectvalue}, this.GetSingleProblemListOperationCompleted, userState);
        }
        
        private void OnGetSingleProblemListOperationCompleted(object arg) {
            if ((this.GetSingleProblemListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSingleProblemListCompleted(this, new GetSingleProblemListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/selectSingQuestion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SingleProblem[] selectSingQuestion(string UserId, int PaperId) {
            object[] results = this.Invoke("selectSingQuestion", new object[] {
                        UserId,
                        PaperId});
            return ((SingleProblem[])(results[0]));
        }
        
        /// <remarks/>
        public void selectSingQuestionAsync(string UserId, int PaperId) {
            this.selectSingQuestionAsync(UserId, PaperId, null);
        }
        
        /// <remarks/>
        public void selectSingQuestionAsync(string UserId, int PaperId, object userState) {
            if ((this.selectSingQuestionOperationCompleted == null)) {
                this.selectSingQuestionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnselectSingQuestionOperationCompleted);
            }
            this.InvokeAsync("selectSingQuestion", new object[] {
                        UserId,
                        PaperId}, this.selectSingQuestionOperationCompleted, userState);
        }
        
        private void OnselectSingQuestionOperationCompleted(object arg) {
            if ((this.selectSingQuestionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.selectSingQuestionCompleted(this, new selectSingQuestionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class Course {
        
        private int departmentIdField;
        
        private string departmentNameField;
        
        /// <remarks/>
        public int DepartmentId {
            get {
                return this.departmentIdField;
            }
            set {
                this.departmentIdField = value;
            }
        }
        
        /// <remarks/>
        public string DepartmentName {
            get {
                return this.departmentNameField;
            }
            set {
                this.departmentNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class SingleProblem {
        
        private string userAnswerField;
        
        private System.DateTime examTimeField;
        
        private int markField;
        
        private string paperNameField;
        
        private int idField;
        
        private int courseIDField;
        
        private string titleField;
        
        private string answerAField;
        
        private string answerBField;
        
        private string answerCField;
        
        private string answerDField;
        
        private string answerField;
        
        /// <remarks/>
        public string UserAnswer {
            get {
                return this.userAnswerField;
            }
            set {
                this.userAnswerField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ExamTime {
            get {
                return this.examTimeField;
            }
            set {
                this.examTimeField = value;
            }
        }
        
        /// <remarks/>
        public int Mark {
            get {
                return this.markField;
            }
            set {
                this.markField = value;
            }
        }
        
        /// <remarks/>
        public string PaperName {
            get {
                return this.paperNameField;
            }
            set {
                this.paperNameField = value;
            }
        }
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int CourseID {
            get {
                return this.courseIDField;
            }
            set {
                this.courseIDField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string AnswerA {
            get {
                return this.answerAField;
            }
            set {
                this.answerAField = value;
            }
        }
        
        /// <remarks/>
        public string AnswerB {
            get {
                return this.answerBField;
            }
            set {
                this.answerBField = value;
            }
        }
        
        /// <remarks/>
        public string AnswerC {
            get {
                return this.answerCField;
            }
            set {
                this.answerCField = value;
            }
        }
        
        /// <remarks/>
        public string AnswerD {
            get {
                return this.answerDField;
            }
            set {
                this.answerDField = value;
            }
        }
        
        /// <remarks/>
        public string Answer {
            get {
                return this.answerField;
            }
            set {
                this.answerField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetitemCompletedEventHandler(object sender, GetitemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetitemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetitemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void ListCourseCompletedEventHandler(object sender, ListCourseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListCourseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListCourseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Course[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Course[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void InsertQuestionCompletedEventHandler(object sender, InsertQuestionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertQuestionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertQuestionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void UpdateQuestionCompletedEventHandler(object sender, UpdateQuestionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateQuestionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateQuestionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GetSingleProblemListCompletedEventHandler(object sender, GetSingleProblemListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSingleProblemListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSingleProblemListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SingleProblem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SingleProblem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void selectSingQuestionCompletedEventHandler(object sender, selectSingQuestionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class selectSingQuestionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal selectSingQuestionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SingleProblem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SingleProblem[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
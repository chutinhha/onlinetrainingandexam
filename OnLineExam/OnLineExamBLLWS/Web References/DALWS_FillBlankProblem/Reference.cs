//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3603
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 2.0.50727.3603 版自动生成。
// 
#pragma warning disable 1591

namespace OnLineExamBLLWS.DALWS_FillBlankProblem {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DALWS_FillBlankProblemSoap", Namespace="http://tempuri.org/")]
    public partial class DALWS_FillBlankProblem : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback FillBlankProbleUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback FillBlankProbleInsertOperationCompleted;
        
        private System.Threading.SendOrPostCallback FillBlankProbleDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GeFillBlankProblemListOperationCompleted;
        
        private System.Threading.SendOrPostCallback FillQuestionOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DALWS_FillBlankProblem() {
            this.Url = global::OnLineExamBLLWS.Properties.Settings.Default.OnLineExamBLLWS_DALWS_FillBlankProblem_DALWS_FillBlankProblem;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event FillBlankProbleUpdateCompletedEventHandler FillBlankProbleUpdateCompleted;
        
        /// <remarks/>
        public event FillBlankProbleInsertCompletedEventHandler FillBlankProbleInsertCompleted;
        
        /// <remarks/>
        public event FillBlankProbleDeleteCompletedEventHandler FillBlankProbleDeleteCompleted;
        
        /// <remarks/>
        public event GeFillBlankProblemListCompletedEventHandler GeFillBlankProblemListCompleted;
        
        /// <remarks/>
        public event FillQuestionCompletedEventHandler FillQuestionCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FillBlankProbleUpdate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FillBlankProbleUpdate(FillBlankProblem fb) {
            object[] results = this.Invoke("FillBlankProbleUpdate", new object[] {
                        fb});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FillBlankProbleUpdateAsync(FillBlankProblem fb) {
            this.FillBlankProbleUpdateAsync(fb, null);
        }
        
        /// <remarks/>
        public void FillBlankProbleUpdateAsync(FillBlankProblem fb, object userState) {
            if ((this.FillBlankProbleUpdateOperationCompleted == null)) {
                this.FillBlankProbleUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFillBlankProbleUpdateOperationCompleted);
            }
            this.InvokeAsync("FillBlankProbleUpdate", new object[] {
                        fb}, this.FillBlankProbleUpdateOperationCompleted, userState);
        }
        
        private void OnFillBlankProbleUpdateOperationCompleted(object arg) {
            if ((this.FillBlankProbleUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FillBlankProbleUpdateCompleted(this, new FillBlankProbleUpdateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FillBlankProbleInsert", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FillBlankProbleInsert(FillBlankProblem fi) {
            object[] results = this.Invoke("FillBlankProbleInsert", new object[] {
                        fi});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FillBlankProbleInsertAsync(FillBlankProblem fi) {
            this.FillBlankProbleInsertAsync(fi, null);
        }
        
        /// <remarks/>
        public void FillBlankProbleInsertAsync(FillBlankProblem fi, object userState) {
            if ((this.FillBlankProbleInsertOperationCompleted == null)) {
                this.FillBlankProbleInsertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFillBlankProbleInsertOperationCompleted);
            }
            this.InvokeAsync("FillBlankProbleInsert", new object[] {
                        fi}, this.FillBlankProbleInsertOperationCompleted, userState);
        }
        
        private void OnFillBlankProbleInsertOperationCompleted(object arg) {
            if ((this.FillBlankProbleInsertCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FillBlankProbleInsertCompleted(this, new FillBlankProbleInsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FillBlankProbleDelete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FillBlankProbleDelete(FillBlankProblem fd) {
            object[] results = this.Invoke("FillBlankProbleDelete", new object[] {
                        fd});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FillBlankProbleDeleteAsync(FillBlankProblem fd) {
            this.FillBlankProbleDeleteAsync(fd, null);
        }
        
        /// <remarks/>
        public void FillBlankProbleDeleteAsync(FillBlankProblem fd, object userState) {
            if ((this.FillBlankProbleDeleteOperationCompleted == null)) {
                this.FillBlankProbleDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFillBlankProbleDeleteOperationCompleted);
            }
            this.InvokeAsync("FillBlankProbleDelete", new object[] {
                        fd}, this.FillBlankProbleDeleteOperationCompleted, userState);
        }
        
        private void OnFillBlankProbleDeleteOperationCompleted(object arg) {
            if ((this.FillBlankProbleDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FillBlankProbleDeleteCompleted(this, new FillBlankProbleDeleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GeFillBlankProblemList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FillBlankProblem[] GeFillBlankProblemList(string selectvalue) {
            object[] results = this.Invoke("GeFillBlankProblemList", new object[] {
                        selectvalue});
            return ((FillBlankProblem[])(results[0]));
        }
        
        /// <remarks/>
        public void GeFillBlankProblemListAsync(string selectvalue) {
            this.GeFillBlankProblemListAsync(selectvalue, null);
        }
        
        /// <remarks/>
        public void GeFillBlankProblemListAsync(string selectvalue, object userState) {
            if ((this.GeFillBlankProblemListOperationCompleted == null)) {
                this.GeFillBlankProblemListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGeFillBlankProblemListOperationCompleted);
            }
            this.InvokeAsync("GeFillBlankProblemList", new object[] {
                        selectvalue}, this.GeFillBlankProblemListOperationCompleted, userState);
        }
        
        private void OnGeFillBlankProblemListOperationCompleted(object arg) {
            if ((this.GeFillBlankProblemListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GeFillBlankProblemListCompleted(this, new GeFillBlankProblemListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FillQuestion", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FillBlankProblem[] FillQuestion(string UserId, int PaperId) {
            object[] results = this.Invoke("FillQuestion", new object[] {
                        UserId,
                        PaperId});
            return ((FillBlankProblem[])(results[0]));
        }
        
        /// <remarks/>
        public void FillQuestionAsync(string UserId, int PaperId) {
            this.FillQuestionAsync(UserId, PaperId, null);
        }
        
        /// <remarks/>
        public void FillQuestionAsync(string UserId, int PaperId, object userState) {
            if ((this.FillQuestionOperationCompleted == null)) {
                this.FillQuestionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFillQuestionOperationCompleted);
            }
            this.InvokeAsync("FillQuestion", new object[] {
                        UserId,
                        PaperId}, this.FillQuestionOperationCompleted, userState);
        }
        
        private void OnFillQuestionOperationCompleted(object arg) {
            if ((this.FillQuestionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FillQuestionCompleted(this, new FillQuestionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class FillBlankProblem {
        
        private int idField;
        
        private int courseIDField;
        
        private string frontTitleField;
        
        private string backTitleField;
        
        private string answerField;
        
        private string userAnswerField;
        
        private System.DateTime examTimeField;
        
        private int markField;
        
        private string paperNameField;
        
        /// <remarks/>
        public int ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int CourseID {
            get {
                return this.courseIDField;
            }
            set {
                this.courseIDField = value;
            }
        }
        
        /// <remarks/>
        public string FrontTitle {
            get {
                return this.frontTitleField;
            }
            set {
                this.frontTitleField = value;
            }
        }
        
        /// <remarks/>
        public string BackTitle {
            get {
                return this.backTitleField;
            }
            set {
                this.backTitleField = value;
            }
        }
        
        /// <remarks/>
        public string Answer {
            get {
                return this.answerField;
            }
            set {
                this.answerField = value;
            }
        }
        
        /// <remarks/>
        public string UserAnswer {
            get {
                return this.userAnswerField;
            }
            set {
                this.userAnswerField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ExamTime {
            get {
                return this.examTimeField;
            }
            set {
                this.examTimeField = value;
            }
        }
        
        /// <remarks/>
        public int Mark {
            get {
                return this.markField;
            }
            set {
                this.markField = value;
            }
        }
        
        /// <remarks/>
        public string PaperName {
            get {
                return this.paperNameField;
            }
            set {
                this.paperNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void FillBlankProbleUpdateCompletedEventHandler(object sender, FillBlankProbleUpdateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FillBlankProbleUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FillBlankProbleUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void FillBlankProbleInsertCompletedEventHandler(object sender, FillBlankProbleInsertCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FillBlankProbleInsertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FillBlankProbleInsertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void FillBlankProbleDeleteCompletedEventHandler(object sender, FillBlankProbleDeleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FillBlankProbleDeleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FillBlankProbleDeleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void GeFillBlankProblemListCompletedEventHandler(object sender, GeFillBlankProblemListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GeFillBlankProblemListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GeFillBlankProblemListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FillBlankProblem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FillBlankProblem[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    public delegate void FillQuestionCompletedEventHandler(object sender, FillQuestionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FillQuestionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FillQuestionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FillBlankProblem[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FillBlankProblem[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591